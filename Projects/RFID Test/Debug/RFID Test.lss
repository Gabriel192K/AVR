
RFID Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000105  00800100  00800100  000002c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca4  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089b  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000647  00000000  00000000  000018e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053d  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000631  00000000  00000000  000025dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002c0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
		char _byte = UART0_Read_Char();
		if (_byte != '>') _strncat(_string, &_byte, 1);
		else return 1;
	}
	return 0;
}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
  aa:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
  ae:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
  b2:	20 71       	andi	r18, 0x10	; 16
  b4:	28 60       	ori	r18, 0x08	; 8
  b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <UART_RX_HEAD>
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	8f 77       	andi	r24, 0x7F	; 127
  c0:	99 27       	eor	r25, r25
  c2:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <UART_RX_TAIL>
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	84 17       	cp	r24, r20
  ca:	95 07       	cpc	r25, r21
  cc:	39 f0       	breq	.+14     	; 0xdc <__vector_18+0x4c>
  ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <UART_RX_HEAD>
  d2:	fc 01       	movw	r30, r24
  d4:	eb 57       	subi	r30, 0x7B	; 123
  d6:	fe 4f       	sbci	r31, 0xFE	; 254
  d8:	30 83       	st	Z, r19
  da:	01 c0       	rjmp	.+2      	; 0xde <__vector_18+0x4e>
  dc:	22 e0       	ldi	r18, 0x02	; 2
  de:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_19>:
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
 10e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <UART_TX_HEAD>
 112:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <UART_TX_TAIL>
 116:	98 17       	cp	r25, r24
 118:	79 f0       	breq	.+30     	; 0x138 <__vector_19+0x3c>
 11a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <UART_TX_TAIL>
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	8f 77       	andi	r24, 0x7F	; 127
 124:	99 27       	eor	r25, r25
 126:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <UART_TX_TAIL>
 12a:	fc 01       	movw	r30, r24
 12c:	eb 5f       	subi	r30, 0xFB	; 251
 12e:	fe 4f       	sbci	r31, 0xFE	; 254
 130:	80 81       	ld	r24, Z
 132:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
 136:	05 c0       	rjmp	.+10     	; 0x142 <__vector_19+0x46>
 138:	e1 ec       	ldi	r30, 0xC1	; 193
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8f 7d       	andi	r24, 0xDF	; 223
 140:	80 83       	st	Z, r24
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <UART0_Begin>:
 154:	9b 01       	movw	r18, r22
 156:	ac 01       	movw	r20, r24
 158:	f8 94       	cli
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	09 c0       	rjmp	.+18     	; 0x170 <UART0_Begin+0x1c>
 15e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <UART_RX_HEAD>
 162:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <UART_RX_TAIL>
 166:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <UART_TX_HEAD>
 16a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <UART_TX_TAIL>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	81 11       	cpse	r24, r1
 172:	f5 cf       	rjmp	.-22     	; 0x15e <UART0_Begin+0xa>
 174:	78 94       	sei
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	78 eb       	ldi	r23, 0xB8	; 184
 17a:	8b e0       	ldi	r24, 0x0B	; 11
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 02 01 	call	0x204	; 0x204 <__udivmodsi4>
 182:	21 50       	subi	r18, 0x01	; 1
 184:	31 09       	sbc	r19, r1
 186:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
 18a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
 18e:	e1 ec       	ldi	r30, 0xC1	; 193
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 69       	ori	r24, 0x98	; 152
 196:	80 83       	st	Z, r24
 198:	e2 ec       	ldi	r30, 0xC2	; 194
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	86 60       	ori	r24, 0x06	; 6
 1a0:	80 83       	st	Z, r24
 1a2:	78 94       	sei
 1a4:	08 95       	ret

000001a6 <UART0_Send_Char>:
 1a6:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <UART_TX_HEAD>
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	4f 5f       	subi	r20, 0xFF	; 255
 1ae:	5f 4f       	sbci	r21, 0xFF	; 255
 1b0:	4f 77       	andi	r20, 0x7F	; 127
 1b2:	55 27       	eor	r21, r21
 1b4:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <UART_TX_TAIL>
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	42 17       	cp	r20, r18
 1bc:	53 07       	cpc	r21, r19
 1be:	d1 f3       	breq	.-12     	; 0x1b4 <UART0_Send_Char+0xe>
 1c0:	fa 01       	movw	r30, r20
 1c2:	eb 5f       	subi	r30, 0xFB	; 251
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	80 83       	st	Z, r24
 1c8:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <UART_TX_HEAD>
 1cc:	e1 ec       	ldi	r30, 0xC1	; 193
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	80 83       	st	Z, r24
 1d6:	08 95       	ret

000001d8 <main>:
#include "src/UART.h"
#include <util/delay.h>

int main(void)
{
	UART0_Begin(19200);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	7b e4       	ldi	r23, 0x4B	; 75
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 aa 00 	call	0x154	; 0x154 <UART0_Begin>
    UART0_Send_Char('C');
 1e4:	83 e4       	ldi	r24, 0x43	; 67
 1e6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART0_Send_Char>
    while (1) 
    {
		 UART0_Send_Char('C');
 1ea:	83 e4       	ldi	r24, 0x43	; 67
 1ec:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART0_Send_Char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	8f e7       	ldi	r24, 0x7F	; 127
 1f4:	95 e2       	ldi	r25, 0x25	; 37
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x1e>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <__EEPROM_REGION_LENGTH__>
 200:	00 00       	nop
 202:	f3 cf       	rjmp	.-26     	; 0x1ea <main+0x12>

00000204 <__udivmodsi4>:
 204:	a1 e2       	ldi	r26, 0x21	; 33
 206:	1a 2e       	mov	r1, r26
 208:	aa 1b       	sub	r26, r26
 20a:	bb 1b       	sub	r27, r27
 20c:	fd 01       	movw	r30, r26
 20e:	0d c0       	rjmp	.+26     	; 0x22a <__udivmodsi4_ep>

00000210 <__udivmodsi4_loop>:
 210:	aa 1f       	adc	r26, r26
 212:	bb 1f       	adc	r27, r27
 214:	ee 1f       	adc	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	a2 17       	cp	r26, r18
 21a:	b3 07       	cpc	r27, r19
 21c:	e4 07       	cpc	r30, r20
 21e:	f5 07       	cpc	r31, r21
 220:	20 f0       	brcs	.+8      	; 0x22a <__udivmodsi4_ep>
 222:	a2 1b       	sub	r26, r18
 224:	b3 0b       	sbc	r27, r19
 226:	e4 0b       	sbc	r30, r20
 228:	f5 0b       	sbc	r31, r21

0000022a <__udivmodsi4_ep>:
 22a:	66 1f       	adc	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	88 1f       	adc	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	1a 94       	dec	r1
 234:	69 f7       	brne	.-38     	; 0x210 <__udivmodsi4_loop>
 236:	60 95       	com	r22
 238:	70 95       	com	r23
 23a:	80 95       	com	r24
 23c:	90 95       	com	r25
 23e:	9b 01       	movw	r18, r22
 240:	ac 01       	movw	r20, r24
 242:	bd 01       	movw	r22, r26
 244:	cf 01       	movw	r24, r30
 246:	08 95       	ret

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
